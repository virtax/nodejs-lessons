openapi: 3.0.0
info:
  title: Users/Sales API
  version: 1.0.0
  description: |
    API for managing users and sales.

servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # --- User ---
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: johndoe
        passwordHash:
          type: string
          example: hashed_password_here
        email:
          type: string
          example: my@mail.com
        age:
          type: integer
          example: 30
        salary:
          type: integer
          example: 1000
        sales:
          type: array
          items:
            $ref: '#/components/schemas/Sale'

      required:
        - id
        - username
        - email
        - passwordHash

    # --- Sale ---
    Sale:
      type: object
      properties:
        id:
          type: integer
          example: 10
        product:
          type: string
          example: 'IPhone 12'
        amount:
          type: number
          example: 20
        price:
          type: number
          example: 20000
        user:
          $ref: '#/components/schemas/User'
      required:
        - id
        - product
        - amount
        - price

security:
  - BearerAuth: []

paths:
  # ------------------------ Users ------------------------

  /api/v1/users/:
    get:
      summary: Retrieve a list of all Users
      tags:
        - Users
      responses:
        '200':
          description: List of Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error

    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - passwordHash
                - age
              properties:
                name:
                  type: string
                  example: tarasbulba
                email:
                  type: string
                  example: tarasbulba@mail.com
                age:
                  type: number
                  example: 22
                passwordHash:
                  type: string
                  example: password

      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User created successfully'
        '400':
          description: User already exists or invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Username already exists'
        '500':
          description: Internal server error

  /api/v1/users/{id}:
    get:
      summary: Retrieve user data
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful retrieval of user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
                  name:
                    type: string
                    example: tarasbulba
                  email:
                    type: string
                    example: tarasbulba
                  age:
                    type: number
                    example: tarasbulba
                  passwordHash:
                    type: string


        '401':
          description: Unauthorized

    put:
      summary: Edit user
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: tarasbulba
                email:
                  type: string
                  example: tarasbulba
                age:
                  type: number
                  example: tarasbulba
                passwordHash:
                  type: string
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Profile updated successfully'
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error


    delete:
      summary: Delete a User
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User deleted successfully'
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions to delete
        '404':
          description: User not found
        '500':
          description: Internal server error

  # ------------------------ Sales ------------------------

  /api/v1/sales:
    get:
      summary: Retrieve a list of all Sales
      tags:
        - Sales
      responses:
        '200':
          description: List of Sales
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
        '500':
          description: Internal server error

    post:
      summary: Create a new Sale
      tags:
        - Sales
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                product:
                  type: string
                  example: 'IPhone 12'
                amount:
                  type: number
                  example: 20
                price:
                  type: number
                  example: 20000
      responses:
        '201':
          description: Sale successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  /api/v1/sales/{id}:
    get:
      summary: Retrieve a Sale by ID
      tags:
        - Sales
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Sale ID
      responses:
        '200':
          description: Sale information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        '404':
          description: Sale not found
        '500':
          description: Internal server error

    put:
      summary: Update a Sale
      tags:
        - Sales
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Sale ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 10
                product:
                  type: string
                  example: 'IPhone 12'
                amount:
                  type: number
                  example: 20
                price:
                  type: number
                  example: 20000

      responses:
        '200':
          description: Sale successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions to update
        '404':
          description: Sale not found
        '500':
          description: Internal server error

    delete:
      summary: Delete a Sale
      tags:
        - Sales
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Sale ID
      responses:
        '200':
          description: Sale successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Sale deleted successfully'
        '401':
          description: Unauthorized
        '403':
          description: Insufficient permissions to delete
        '404':
          description: Sale not found
        '500':
          description: Internal server error
